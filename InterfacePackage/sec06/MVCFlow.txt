## 전체적인 흐름 ##

Client (UserDTO 생성하여 요청 전송)
 → Controller (UserDTO 수신)
   → Service (비즈니스 로직 처리)
     → DAO (UserDTO 기반으로 DB 작업 수행)
       → DB (데이터 저장/조회)
       → DAO (조회된 데이터 → UserDTO로 매핑 후 return)
     → Service (UserDTO 기반 추가 로직 처리)
   → Controller (응답 메시지 생성)
 → Client (응답 수신)



## DAO를 인터페이스로 만들었을 때의 구조 ##

[UserService] ───────→ [UserDAO 인터페이스]
    │                           │
    │                           ↓
    │                  [UserDAOImpl 클래스]
    │                           ↓
    │                     (DB와 실제 통신)
    ↓
응답 반환

장점
- UserDAOImpl 클래스를 테스트 클래스로 바꿔서 사용해도
  Service는 구현체인 클래스와 의존하지 않아서 다른 계층에 영향이 없거나 적음.
